<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Guardians: Card Battle Prototype</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Arial', sans-serif;
            background: linear-gradient(135deg, #1e3c72, #2a5298);
            color: white;
            min-height: 100vh;
            padding: 20px;
        }

        .game-container {
            max-width: 1200px;
            margin: 0 auto;
            display: flex;
            flex-direction: column;
            gap: 20px;
        }

        .title {
            text-align: center;
            font-size: 32px;
            font-weight: bold;
            margin-bottom: 20px;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.5);
        }

        .player-info {
            display: flex;
            justify-content: space-between;
            background: rgba(0,0,0,0.3);
            padding: 15px;
            border-radius: 10px;
        }

        .energy-display {
            font-size: 24px;
            font-weight: bold;
        }

        .turn-info {
            text-align: center;
            font-size: 18px;
        }

        .battlefield {
            display: grid;
            grid-template-columns: repeat(4, 1fr);
            gap: 15px;
            min-height: 200px;
            background: rgba(0,0,0,0.2);
            padding: 20px;
            border-radius: 10px;
            border: 2px solid #4a90e2;
        }

        .creature-slot {
            background: rgba(255,255,255,0.1);
            border: 2px dashed #666;
            border-radius: 10px;
            padding: 10px;
            min-height: 150px;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            transition: all 0.3s ease;
        }

        .creature-slot.occupied {
            background: rgba(74, 144, 226, 0.3);
            border: 2px solid #4a90e2;
        }

        .creature-card {
            background: linear-gradient(145deg, #2c3e50, #34495e);
            border: 2px solid #3498db;
            border-radius: 8px;
            padding: 10px;
            width: 100%;
            text-align: center;
            cursor: pointer;
            transition: transform 0.2s ease;
        }

        .creature-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 5px 15px rgba(52, 152, 219, 0.4);
        }

        .creature-card.guardian {
            border-color: #f39c12;
            background: linear-gradient(145deg, #8e44ad, #9b59b6);
        }

        .creature-stats {
            display: flex;
            justify-content: space-between;
            margin-top: 8px;
            font-size: 14px;
        }

        .hand {
            display: flex;
            gap: 10px;
            padding: 20px;
            background: rgba(0,0,0,0.3);
            border-radius: 10px;
            overflow-x: auto;
        }

        .card {
            background: linear-gradient(145deg, #2c3e50, #34495e);
            border: 2px solid #3498db;
            border-radius: 8px;
            padding: 15px;
            min-width: 150px;
            cursor: pointer;
            transition: all 0.3s ease;
            flex-shrink: 0;
            position: relative;
        }

        .card:hover {
            transform: translateY(-10px);
            box-shadow: 0 10px 20px rgba(52, 152, 219, 0.4);
        }

        .card.guardian {
            border-color: #f39c12;
            background: linear-gradient(145deg, #8e44ad, #9b59b6);
        }

        .card.spell {
            border-color: #e74c3c;
            background: linear-gradient(145deg, #c0392b, #e74c3c);
        }

        .card.disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }

        .card.disabled:hover {
            transform: none;
            box-shadow: none;
        }

        .card-name {
            font-weight: bold;
            margin-bottom: 8px;
            font-size: 14px;
        }

        .card-cost {
            background: #f39c12;
            color: white;
            border-radius: 50%;
            width: 25px;
            height: 25px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: bold;
            position: absolute;
            top: -5px;
            right: -5px;
            font-size: 12px;
        }

        .controls {
            display: flex;
            gap: 15px;
            justify-content: center;
            flex-wrap: wrap;
        }

        .btn {
            background: #3498db;
            color: white;
            border: none;
            padding: 12px 24px;
            border-radius: 6px;
            cursor: pointer;
            font-size: 16px;
            transition: background 0.3s ease;
        }

        .btn:hover {
            background: #2980b9;
        }

        .btn:disabled {
            background: #7f8c8d;
            cursor: not-allowed;
        }

        .btn.sacrifice {
            background: #e74c3c;
        }

        .btn.sacrifice:hover {
            background: #c0392b;
        }

        .game-log {
            background: rgba(0,0,0,0.4);
            padding: 15px;
            border-radius: 10px;
            max-height: 150px;
            overflow-y: auto;
            font-size: 14px;
        }

        .log-entry {
            margin-bottom: 5px;
            padding: 3px 0;
        }

        .sacrifice-mode .creature-card {
            border-color: #e74c3c !important;
            cursor: pointer;
        }

        .sacrifice-mode .creature-card:hover {
            background: rgba(231, 76, 60, 0.3) !important;
        }

        .instructions {
            background: rgba(0,0,0,0.3);
            padding: 15px;
            border-radius: 10px;
            margin-bottom: 20px;
        }

        .instructions h3 {
            margin-bottom: 10px;
            color: #f39c12;
        }

        .instructions ul {
            margin-left: 20px;
        }

        .instructions li {
            margin-bottom: 5px;
        }

        @media (max-width: 768px) {
            .battlefield {
                grid-template-columns: repeat(2, 1fr);
            }
            
            .hand {
                flex-wrap: wrap;
            }

            .player-info {
                flex-direction: column;
                gap: 10px;
                text-align: center;
            }

            .title {
                font-size: 24px;
            }
        }
    </style>
</head>
<body>
    <div class="game-container">
        <h1 class="title">‚öîÔ∏è GUARDIANS: Card Battle Prototype ‚öîÔ∏è</h1>
        
        <div class="instructions">
            <h3>How to Play:</h3>
            <ul>
                <li><strong>Energy System:</strong> Starts at 3 cap, scales each turn. Creatures generate energy.</li>
                <li><strong>One Creature Per Turn:</strong> You can only play 1 creature/guardian per turn.</li>
                <li><strong>4 Battlefield Slots:</strong> Maximum creatures you can have out.</li>
                <li><strong>Sacrifice System:</strong> Click "Sacrifice Mode" then click creatures to gain energy equal to their cost.</li>
                <li><strong>Card Types:</strong> Blue = Creatures, Purple = Guardians, Red = Spells</li>
            </ul>
        </div>

        <div class="player-info">
            <div class="energy-display">
                Energy: <span id="current-energy">1</span>/<span id="max-energy">3</span>
            </div>
            <div class="turn-info">
                Turn <span id="turn-number">1</span> | <span id="phase">Main Phase</span>
            </div>
            <div class="energy-display">
                Base HP: <span id="player-hp">20</span>
            </div>
        </div>

        <div class="battlefield" id="battlefield">
            <div class="creature-slot" data-slot="0">
                <div class="slot-label">Slot 1</div>
            </div>
            <div class="creature-slot" data-slot="1">
                <div class="slot-label">Slot 2</div>
            </div>
            <div class="creature-slot" data-slot="2">
                <div class="slot-label">Slot 3</div>
            </div>
            <div class="creature-slot" data-slot="3">
                <div class="slot-label">Slot 4</div>
            </div>
        </div>

        <div class="controls">
            <button class="btn" id="end-turn-btn">End Turn</button>
            <button class="btn sacrifice" id="sacrifice-btn">Sacrifice Mode</button>
            <button class="btn" id="cancel-btn" style="display: none;">Cancel</button>
            <button class="btn" id="reset-btn">Reset Game</button>
        </div>

        <div class="hand" id="hand">
            <!-- Cards will be populated by JavaScript -->
        </div>

        <div class="game-log" id="game-log">
            <div class="log-entry">üéÆ Game started! Draw your opening hand and begin your strategy.</div>
        </div>
    </div>

    <script>
        // Game State
        let gameState = {
            turn: 1,
            energy: 1,
            maxEnergy: 3,
            playerHP: 20,
            battlefield: [null, null, null, null],
            hand: [],
            playedCreatureThisTurn: false,
            sacrificeMode: false,
            energyRegen: 0
        };

        // Card Database - Iron Legion Faction
        const cardDatabase = {
            'iron-recruit': {
                name: 'Iron Recruit',
                cost: 2,
                attack: 4,
                health: 12,
                energyRegen: 1,
                type: 'guardian',
                ability: 'Can intercept attacks targeting your base.',
                faction: 'Iron Legion'
            },
            'legion-scout': {
                name: 'Legion Scout',
                cost: 2,
                attack: 3,
                health: 2,
                energyRegen: 1,
                type: 'creature',
                faction: 'Iron Legion'
            },
            'iron-soldier': {
                name: 'Iron Soldier',
                cost: 3,
                attack: 4,
                health: 4,
                energyRegen: 1,
                type: 'creature',
                faction: 'Iron Legion'
            },
            'supply-officer': {
                name: 'Supply Officer',
                cost: 2,
                attack: 1,
                health: 3,
                energyRegen: 2,
                type: 'creature',
                faction: 'Iron Legion'
            },
            'steel-guard': {
                name: 'Steel Guard',
                cost: 4,
                attack: 3,
                health: 6,
                energyRegen: 1,
                type: 'creature',
                faction: 'Iron Legion'
            },
            'war-machine': {
                name: 'War Machine',
                cost: 5,
                attack: 6,
                health: 4,
                energyRegen: 1,
                type: 'creature',
                faction: 'Iron Legion'
            },
            'steel-tactician': {
                name: 'Steel Tactician',
                cost: 6,
                attack: 6,
                health: 16,
                energyRegen: 2,
                type: 'guardian',
                ability: 'Can intercept attacks. Friendly monsters gain +1 ATK.',
                faction: 'Iron Legion'
            },
            'tactical-strike': {
                name: 'Tactical Strike',
                cost: 2,
                type: 'spell',
                effect: 'Deal 4 damage to target',
                faction: 'Iron Legion'
            },
            'supply-drop': {
                name: 'Supply Drop',
                cost: 1,
                type: 'spell',
                effect: 'Gain +2 energy this turn',
                faction: 'Iron Legion'
            },
            'reinforce': {
                name: 'Reinforce',
                cost: 3,
                type: 'spell',
                effect: 'Give target monster +3/+3',
                faction: 'Iron Legion'
            }
        };

        // Initialize starting hand
        function initializeGame() {
            gameState = {
                turn: 1,
                energy: 1,
                maxEnergy: 3,
                playerHP: 20,
                battlefield: [null, null, null, null],
                hand: [],
                playedCreatureThisTurn: false,
                sacrificeMode: false,
                energyRegen: 0
            };

            gameState.hand = [
                createCard('iron-recruit'),
                createCard('legion-scout'),
                createCard('iron-soldier'),
                createCard('supply-officer'),
                createCard('tactical-strike'),
                createCard('supply-drop')
            ];
            updateDisplay();
            logMessage("üéØ Starting hand drawn. Choose your strategy wisely!");
        }

        function createCard(cardId) {
            const template = cardDatabase[cardId];
            return {
                id: Math.random().toString(36).substr(2, 9),
                templateId: cardId,
                ...template,
                currentHealth: template.health || 0
            };
        }

        function updateDisplay() {
            // Update energy display
            document.getElementById('current-energy').textContent = gameState.energy;
            document.getElementById('max-energy').textContent = gameState.maxEnergy;
            document.getElementById('turn-number').textContent = gameState.turn;
            document.getElementById('player-hp').textContent = gameState.playerHP;

            // Update hand
            updateHand();
            
            // Update battlefield
            updateBattlefield();

            // Update button states
            updateButtons();
        }

        function updateHand() {
            const handElement = document.getElementById('hand');
            handElement.innerHTML = '';

            gameState.hand.forEach(card => {
                const cardElement = createCardElement(card);
                handElement.appendChild(cardElement);
            });
        }

        function createCardElement(card) {
            const cardDiv = document.createElement('div');
            cardDiv.className = `card ${card.type}`;
            cardDiv.dataset.cardId = card.id;

            // Check if card is playable
            const canPlay = canPlayCard(card);
            if (!canPlay) {
                cardDiv.classList.add('disabled');
            }

            cardDiv.innerHTML = `
                <div class="card-cost">${card.cost}</div>
                <div class="card-name">${card.name}</div>
                ${card.attack !== undefined ? `
                    <div class="creature-stats">
                        <span>‚öîÔ∏è ${card.attack}</span>
                        <span>‚ù§Ô∏è ${card.health}</span>
                        <span>‚ö° +${card.energyRegen}</span>
                    </div>
                ` : `
                    <div style="font-size: 12px; margin-top: 8px;">${card.effect || card.ability}</div>
                `}
            `;

            if (canPlay) {
                cardDiv.addEventListener('click', () => playCard(card));
            }

            return cardDiv;
        }

        function canPlayCard(card) {
            if (card.cost > gameState.energy) return false;
            if (card.type === 'creature' || card.type === 'guardian') {
                if (gameState.playedCreatureThisTurn) return false;
                if (gameState.battlefield.every(slot => slot !== null)) return false;
            }
            return true;
        }

        function playCard(card) {
            if (!canPlayCard(card)) return;

            gameState.energy -= card.cost;
            gameState.hand = gameState.hand.filter(c => c.id !== card.id);

            if (card.type === 'creature' || card.type === 'guardian') {
                // Find empty slot
                const emptySlot = gameState.battlefield.findIndex(slot => slot === null);
                if (emptySlot !== -1) {
                    gameState.battlefield[emptySlot] = card;
                    gameState.playedCreatureThisTurn = true;
                    logMessage(`‚öîÔ∏è Played ${card.name} to battlefield slot ${emptySlot + 1}`);
                }
            } else if (card.type === 'spell') {
                executeSpell(card);
            }

            updateDisplay();
        }

        function executeSpell(card) {
            switch (card.templateId) {
                case 'tactical-strike':
                    logMessage(`üí• Cast ${card.name} - Deal 4 damage (target selection not implemented in prototype)`);
                    break;
                case 'supply-drop':
                    gameState.energy += 2;
                    logMessage(`üì¶ Cast ${card.name} - Gained 2 energy this turn!`);
                    break;
                case 'reinforce':
                    logMessage(`üõ°Ô∏è Cast ${card.name} - Give target +3/+3 (target selection not implemented in prototype)`);
                    break;
            }
        }

        function updateBattlefield() {
            const slots = document.querySelectorAll('.creature-slot');
            
            slots.forEach((slot, index) => {
                const creature = gameState.battlefield[index];
                
                if (creature) {
                    slot.classList.add('occupied');
                    slot.innerHTML = `
                        <div class="creature-card ${creature.type}" data-creature-id="${creature.id}">
                            <div class="card-name">${creature.name}</div>
                            <div class="creature-stats">
                                <span>‚öîÔ∏è${creature.attack}/‚ù§Ô∏è${creature.currentHealth}</span>
                                <span>‚ö°+${creature.energyRegen}</span>
                            </div>
                        </div>
                    `;

                    // Add sacrifice click handler if in sacrifice mode
                    if (gameState.sacrificeMode) {
                        const creatureCard = slot.querySelector('.creature-card');
                        creatureCard.addEventListener('click', () => sacrificeCreature(index));
                    }
                } else {
                    slot.classList.remove('occupied');
                    slot.innerHTML = `<div class="slot-label">Slot ${index + 1}</div>`;
                }
            });

            // Update sacrifice mode styling
            const battlefield = document.getElementById('battlefield');
            if (gameState.sacrificeMode) {
                battlefield.classList.add('sacrifice-mode');
            } else {
                battlefield.classList.remove('sacrifice-mode');
            }
        }

        function updateButtons() {
            const endTurnBtn = document.getElementById('end-turn-btn');
            const sacrificeBtn = document.getElementById('sacrifice-btn');
            const cancelBtn = document.getElementById('cancel-btn');

            if (gameState.sacrificeMode) {
                endTurnBtn.style.display = 'none';
                sacrificeBtn.style.display = 'none';
                cancelBtn.style.display = 'inline-block';
            } else {
                endTurnBtn.style.display = 'inline-block';
                sacrificeBtn.style.display = 'inline-block';
                cancelBtn.style.display = 'none';
                
                // Disable sacrifice button if no creatures
                const hasCreatures = gameState.battlefield.some(slot => slot !== null);
                sacrificeBtn.disabled = !hasCreatures;
            }
        }

        function endTurn() {
            // Calculate energy regeneration from creatures
            gameState.energyRegen = gameState.battlefield
                .filter(creature => creature !== null)
                .reduce((total, creature) => total + creature.energyRegen, 0);

            // Advance turn
            gameState.turn++;
            gameState.playedCreatureThisTurn = false;

            // Update energy cap based on turn
            if (gameState.turn === 2) gameState.maxEnergy = 4;
            else if (gameState.turn === 3) gameState.maxEnergy = 5;
            else if (gameState.turn === 4) gameState.maxEnergy = 6;
            else if (gameState.turn === 5) gameState.maxEnergy = 8;
            else if (gameState.turn === 6) gameState.maxEnergy = 9;
            else if (gameState.turn === 7) gameState.maxEnergy = 12;
            else if (gameState.turn === 8) gameState.maxEnergy = 15;
            else if (gameState.turn >= 9) gameState.maxEnergy = 999;

            // Calculate base energy gain
            let baseEnergyGain;
            if (gameState.turn <= 2) baseEnergyGain = 1;
            else if (gameState.turn <= 5) baseEnergyGain = 2;
            else baseEnergyGain = 3;

            // Add energy
            const totalEnergyGain = baseEnergyGain + gameState.energyRegen;
            gameState.energy = Math.min(gameState.energy + totalEnergyGain, gameState.maxEnergy);

            logMessage(`üîÑ Turn ${gameState.turn} - Gained ${totalEnergyGain} energy (${baseEnergyGain} base + ${gameState.energyRegen} from creatures)`);

            // Draw a card (simplified)
            if (Math.random() < 0.8) {
                const cardPool = ['legion-scout', 'iron-soldier', 'supply-officer', 'steel-guard', 'tactical-strike', 'war-machine', 'steel-tactician', 'reinforce'];
                const newCard = createCard(cardPool[Math.floor(Math.random() * cardPool.length)]);
                gameState.hand.push(newCard);
                logMessage(`üìö Drew ${newCard.name}`);
            }

            updateDisplay();
        }

        function toggleSacrificeMode() {
            gameState.sacrificeMode = !gameState.sacrificeMode;
            updateDisplay();
            
            if (gameState.sacrificeMode) {
                logMessage("üî• Sacrifice mode activated - click a creature to sacrifice it for energy");
            } else {
                logMessage("‚ùå Sacrifice mode cancelled");
            }
        }

        function sacrificeCreature(slotIndex) {
            if (!gameState.sacrificeMode) return;
            
            const creature = gameState.battlefield[slotIndex];
            if (!creature) return;

            // Gain energy equal to creature's cost
            gameState.energy = Math.min(gameState.energy + creature.cost, gameState.maxEnergy);
            
            // Remove creature from battlefield
            gameState.battlefield[slotIndex] = null;
            
            logMessage(`üíÄ Sacrificed ${creature.name} for ${creature.cost} energy`);
            
            // Exit sacrifice mode
            gameState.sacrificeMode = false;
            updateDisplay();
        }

        function resetGame() {
            logMessage("üîÑ Game reset!");
            initializeGame();
        }

        function logMessage(message) {
            const logElement = document.getElementById('game-log');
            const entry = document.createElement('div');
            entry.className = 'log-entry';
            entry.textContent = message;
            logElement.appendChild(entry);
            logElement.scrollTop = logElement.scrollHeight;
        }

        // Event Listeners
        document.getElementById('end-turn-btn').addEventListener('click', endTurn);
        document.getElementById('sacrifice-btn').addEventListener('click', toggleSacrificeMode);
        document.getElementById('cancel-btn').addEventListener('click', toggleSacrificeMode);
        document.getElementById('reset-btn').addEventListener('click', resetGame);

        // Initialize the game
        initializeGame();
    </script>
</body>
</html>
